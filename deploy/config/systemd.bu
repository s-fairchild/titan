variant: fcos
version: 1.5.0
systemd:
  units:
    - name: podman.socket
      enabled: true
    - name: rpm-ostree-countme.timer
      enabled: false
      mask: true
    - name: var-local-lib-k3s-agent-appdata.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount appdata btrfs volume
        After=dev-md126.device
        BindsTo=dev-md126.device

        [Mount]
        TimeoutSec=10min
        # /dev/md/appdata
        What=/dev/md126
        Type=btrfs
        Options=compress=zstd:1

        [Install]
        RequiredBy=local-fs.target
    - name: var-local-lib-k3s-agent-cctv.mount
      enabled: true
      contents: |
        [Unit]
        Description=Mount cctv btrfs volume
        After=dev-md127.device
        BindsTo=dev-md127.device

        [Mount]
        TimeoutSec=10min
        # /dev/md/cctv
        What=/dev/md127
        Type=btrfs
        Options=compress=zstd:1

        [Install]
        RequiredBy=local-fs.target
    - name: kube-node.service
      enabled: true
storage:
  links:
    # TODO create dropin directories to hold Unit conditions for unit dependencies
    - path: /etc/containers/systemd/k3s-server@1.container
      overwrite: true
      target: /etc/containers/systemd/k3s-server@.container
    - path: /etc/containers/systemd/k3s-server@2.container
      overwrite: true
      target: /etc/containers/systemd/k3s-server@.container
  files:
    # systemd quadlet files for podman
    # Containers
    - path: /etc/containers/systemd/k3s-server@.container
      overwrite: true
      contents:
        # TODO set nf_conntrack_max via podman
        # "Set sysctl 'net/netfilter/nf_conntrack_max' to 131072"
        inline: |
          [Unit]
          Description=K3S Server Node %i Podman Container
          Upholds=k3s-apiserverlb@0.service

          [Service]
          Restart=always
          RestartSec=30
          ExecStartPre=modprobe iptable_filter
          ExecStartPre=modprobe iptable_nat
          ExecStartPre=/usr/bin/podman secret exists k3s-token
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-server
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-server-%i
          Environment="NAME=k3s-server-%i"

          [Container]
          ContainerName=${NAME}
          AddCapability=ALL
          HostName=${NAME}
          Label=app=k3s
          Label=cluster=${CLUSTER}
          Image=k3s.image
          Exec=server
          Network=kube-node.network:ip=${NODE_IP}
          Network=kube-service.network
          DNSSearch=${DNS_SEARCH}
          Pull=never
          SeccompProfile=unconfined
          SecurityLabelDisable=true
          ShmSize=5g
          Secret=k3s-token,type=env,target=K3S_TOKEN
          Timezone=UTC
          Volume=/etc/machine-id:/etc/machine-id:ro
          Volume=${NAME}-kubelet:/var/lib/kubelet:Z
          Volume=${NAME}-data:/var/lib/rancher/k3s:Z
          Volume=${NAME}-rancher:/etc/rancher:Z
          Volume=${NAME}-storage:/var/lib/rancher/k3s/storage:Z
          Volume=${NAME}-log:/var/log/pod:Z
          Volume=${NAME}-containers:/var/lib/containers:Z
          Volume=/var/usrlocal/etc/k3s/config/${NAME}.yaml:/etc/rancher/k3s/config.yaml:Z,ro
          Volume=/var/usrlocal/etc/k3s/manifests:/var/lib/rancher/k3s/server/manifests/compute:z
          Volume=/var/usrlocal/etc/k3s/skip:/var/lib/rancher/k3s/server/manifests/skip:z,ro
          AddDevice=/dev/fuse:/dev/fuse
          PodmanArgs=--oom-score-adj=1000 --privileged

          [Install]
          WantedBy=default.target
          DefaultInstance=0
    - path: /etc/containers/systemd/k3s-agent@.container
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=K3S Agent Node %i Podman Container

          [Service]
          Restart=always
          RestartSec=30
          ExecStartPre=modprobe iptable_filter
          ExecStartPre=modprobe iptable_nat
          ExecStartPre=/usr/bin/podman secret exists k3s-token
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-agent
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-agent-%i
          Environment="NAME=k3s-agent-%i"

          [Container]
          ContainerName=${NAME}
          HostName=${NAME}
          Label=app=k3s
          Label=cluster=${CLUSTER}
          Label=role=agent
          Image=k3s.image
          Exec=agent
          Network=kube-node.network:ip=${NODE_IP}
          Network=kube-service.network
          DNSSearch=${DNS_SEARCH}
          Pull=never
          ShmSize=5g
          Secret=k3s-token,type=env,target=K3S_TOKEN
          Timezone=UTC
          Volume=/etc/machine-id:/etc/machine-id:ro
          Volume=${NAME}-kubelet:/var/lib/kubelet:Z
          Volume=${NAME}-pod-logs:/var/log/pods:Z
          Volume=${NAME}-data:/var/lib/rancher/k3s:Z
          Volume=${NAME}-etc-rancher:/etc/rancher:Z
          Volume=/var/usrlocal/etc/k3s/config/${NAME}.yaml:/etc/rancher/k3s/config.yaml:Z,ro
          Volume=local-path-default:/mnt/local-path-default:z
          Volume=local-path-nvme:/mnt/local-path-nvme:z
          Volume=local-path-appdata.volume:/mnt/local-path-appdata:z
          Volume=local-path-cctv.volume:/mnt/local-path-cctv:z
          # TODO set host device via env file
          # TODO Add this as a dropin file to allow setting up libvirt vm without cameras
          # AddDevice=/dev/v4l/by-id/usb-HD_Camera_Manufacturer_HD_USB_Camera_2020101401-video-index0:/dev/video0
          # AddDevice=/dev/v4l/by-id/usb-HD_Camera_Manufacturer_HD_USB_Camera_2020101401-video-index1:/dev/video1
          AddDevice=/dev/snd:/dev/snd
          # TODO Add this as a dropin file to allow setting up libvirt vm without cameras
          # AddDevice=${DRI_RENDER}:/dev/dri/renderD128:rwm
          # TODO Add this as a dropin file to allow setting up libvirt vm without cameras
          # AddDevice=${DRI_CARD}:/dev/dri/card0
          PodmanArgs=--oom-score-adj=1000 --privileged

          [Install]
          WantedBy=default.target
          DefaultInstance=0
    - path: /etc/containers/systemd/k3s-applb@.container
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=K3S Application Loadbalancer Node %i Podman Container

          [Service]
          Restart=always
          RestartSec=30
          ExecStartPre=modprobe iptable_filter
          ExecStartPre=modprobe iptable_nat
          ExecStartPre=/usr/bin/podman secret exists k3s-token
          # TODO update suffix with env variable if possible
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-loadbalancer
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-applb-%i
          Environment="NAME=k3s-applb-%i"

          [Container]
          ContainerName=${NAME}
          HostName=${NAME}
          Label=app=k3s
          Label=role=loadbalancer
          Label=cluster=${CLUSTER}
          Image=k3s.image
          Exec=agent
          Network=kube-node.network:ip=${NODE_IP}
          Network=kube-service.network
          DNSSearch=${DNS_SEARCH}
          PublishPort=${HOST_IP}:80:80
          PublishPort=${HOST_IP}:443:443
          PublishPort=${HOST_IP}:53:30053/udp
          PublishPort=${HOST_IP}:8554:30555/udp
          PublishPort=${HOST_IP}:8555:30556/tcp
          Pull=never
          ShmSize=5g
          Secret=k3s-token,type=env,target=K3S_TOKEN
          Timezone=UTC
          Volume=/etc/machine-id:/etc/machine-id:ro
          Volume=${NAME}-data:/var/lib/rancher/k3s
          Volume=${NAME}-rancher:/etc/rancher
          Volume=/var/usrlocal/etc/k3s/config/${NAME}.yaml:/etc/rancher/k3s/config.yaml:z,ro
          PodmanArgs=--oom-score-adj=1000 --privileged

          [Install]
          WantedBy=default.target
          DefaultInstance=0
    - path: /etc/containers/systemd/k3s-apiserver@.container
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=K3S ApiServer Loadbalancer Node %i Podman Container

          [Service]
          Restart=always
          RestartSec=30
          # TODO update suffix with env variable if possible
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-loadbalancer
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-apiserverlb
          EnvironmentFile=/var/usrlocal/etc/sysconfig/k3s-apiserverlb-%i
          Environment="NAME=k3s-apiserverlb-%i"

          [Container]
          ContainerName=${NAME}
          HostName=${NAME}
          Label=app=k3s
          Label=role=apiserver-loadbalancer
          Label=cluster=${CLUSTER}
          Image=nginx.image
          Network=kube-node.network:ip=${NODE_IP}
          Network=kube-service.network:ip=${SERVICE_IP}
          DNSSearch=${DNS_SEARCH}
          PublishPort=${HOST_IP}:6443:6443
          Timezone=UTC
          Pull=never
          Volume=/var/usrlocal/etc/k3s/config/k3s-apiserverlb-0-nginx.conf:/etc/nginx/nginx.conf:Z,ro
          PodmanArgs=--oom-score-adj=1000 --privileged

          [Install]
          WantedBy=default.target
          DefaultInstance=0
    - path: /var/usrlocal/etc/sysconfig/k3s-apiserverlb
      overwrite: true
      contents:
        inline: |
          CLUSTER="rick"
          DNS_SEARCH="expresso.lan"
    - path: /var/usrlocal/etc/sysconfig/k3s-apiserverlb-0
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.5"
          SERVICE_IP="10.43.0.253"
    # Images
    - path: /etc/containers/systemd/k3s.image
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Pull image docker.io/rancher/k3s:v1.30.4-k3s1

          [Image]
          Image=docker.io/rancher/k3s:v1.30.4-k3s1

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/nginx.image
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Pull image docker.io/nginx:stable

          [Image]
          Image=docker.io/nginx:stable

          [Install]
          WantedBy=default.target
    # Networks
    - path: /etc/containers/systemd/kube-node.network
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Podman service kube-node

          [Network]
          NetworkName=kube-node
          Gateway=10.98.254.254
          Subnet=10.98.0.0/16
          IPRange=10.98.100.1-10.98.100.100
          # TODO set cluster name via environment
          Label=cluster=rick
          Label=app=k3s

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/kube-pod.network
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Podman service kube-node

          [Network]
          NetworkName=kube-pod
          Gateway=10.42.254.254
          Subnet=10.42.0.0/16
          IPRange=10.42.100.1-10.42.100.100
          # TODO set cluster name via environment
          Label=cluster=rick
          Label=app=k3s

          [Install]
          WantedBy=default.target
    - path: /etc/containers/systemd/kube-service.network
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Podman service kube-node

          [Network]
          NetworkName=kube-service
          Gateway=10.43.254.254
          Subnet=10.43.0.0/16
          IPRange=10.43.100.1-10.43.100.100
          # TODO set cluster name via environment
          Label=cluster=rick
          Label=app=k3s

          [Install]
          WantedBy=default.target
    # volume quadlets
    - path: /etc/containers/systemd/local-path-appdata.volume
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Podman volume local-path-appdata with btrfs subvolume as backing drive

          [Service]
          ExecStartPre=btrfs subvolume create -p /var/local/lib/k3s/agent/cctv/local-path-cctv

          [Volume]
          ContainersConfModule=/usr/local/etc/storage/storage-btrfs.conf
          Options=compress=zstd:1,subvol=local-path-appdata
          Type=btrfs
          Device=/dev/disk/by-label/appdata 

          [Install]
          WantedBy=default.target

    - path: /etc/containers/systemd/local-path-cctv.volume
      overwrite: true
      contents:
        inline: |
          [Unit]
          Description=Podman volume %N with btrfs subvolume as backing drive

          [Service]
          ExecStartPre=btrfs subvolume create -p /var/local/lib/k3s/agent/appdata/local-path-appdata

          [Volume]
          ContainersConfModule=/usr/local/etc/storage/storage-btrfs.conf
          Options=compress=zstd:1,subvol=local-path-cctv
          Type=btrfs
          Device=/dev/disk/by-label/cctv

          [Install]
          WantedBy=default.target
    # Container systemd environment files
    # Common agent environment
    - path: /var/usrlocal/etc/sysconfig/k3s-agent
      overwrite: true
      contents:
        inline: |
          CLUSTER="rick"
          DNS_SEARCH="expresso.lan"
          DRI_CARD="/dev/dri/by-path/pci-0000:00:02.0-card"
          DRI_RENDER="/dev/dri/by-path/pci-0000:00:02.0-render"

    - path: /var/usrlocal/etc/sysconfig/k3s-agent-0
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.100"
    # Common server environment
    - path: /var/usrlocal/etc/sysconfig/k3s-server
      overwrite: true
      contents:
        inline: |
          CLUSTER="rick"
          DNS_SEARCH="expresso.lan"

    - path: /var/usrlocal/etc/sysconfig/k3s-applb-0
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.253"
    - path: /var/usrlocal/etc/sysconfig/k3s-server-0
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.1"
    - path: /var/usrlocal/etc/sysconfig/k3s-server-1
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.2"
    - path: /var/usrlocal/etc/sysconfig/k3s-server-2
      overwrite: true
      contents:
        inline: |
          NODE_IP="10.98.0.3"

    # K3S config files
    - path: /var/usrlocal/etc/k3s/config/k3s-agent-0.yaml
      overwrite: true
      contents:
        local: k3s/k3s-agent-0.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-agent-1.yaml
      overwrite: true
      contents:
        local: k3s/k3s-agent-1.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-agent-2.yaml
      overwrite: true
      contents:
        local: k3s/k3s-agent-2.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-server-0.yaml
      overwrite: true
      contents:
        local: k3s/k3s-server-0.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-server-1.yaml
      overwrite: true
      contents:
        local: k3s/k3s-server-1.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-server-2.yaml
      overwrite: true
      contents:
        local: k3s/k3s-server-2.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-applb-0.yaml
      overwrite: true
      contents:
        local: k3s/k3s-applb-0.yaml
    - path: /var/usrlocal/etc/k3s/config/k3s-apiserverlb-0-nginx.conf
      overwrite: true
      contents:
        local: k3s/k3s-apiserverlb-0-nginx.conf
    - path: /var/usrlocal/etc/k3s/skip/traefik.yaml.skip
      overwrite: true
      contents:
        inline: |

    - path: /var/usrlocal/etc/k3s/skip/local-storage.yaml.skip
      overwrite: true
      contents:
        inline: |

    - path: /var/usrlocal/etc/k3s/manifests/traefik-custom.yaml
      overwrite: true
      contents:
        local: manifests/traefik-custom.yaml
    - path: /var/usrlocal/etc/k3s/manifests/pihole.yaml
      overwrite: true
      contents:
        local: manifests/pihole.yaml
    - path: /var/usrlocal/etc/k3s/manifests/local-storage-custom.yaml
      overwrite: true
      contents:
        local: manifests/local-storage-custom.yaml
    - path: /var/usrlocal/etc/k3s/manifests/jellyfin.yaml
      overwrite: true
      contents:
        local: manifests/jellyfin.yaml
    - path: /var/usrlocal/etc/k3s/manifests/coredns-custom.yaml
      overwrite: true
      contents:
        local: manifests/coredns-custom.yaml
    - path: /etc/zincati/config.d/55-updates-strategy.toml
      overwrite: true
      contents:
        inline: |
          [updates]
          strategy = "periodic"
          [[updates.periodic.window]]
          days = [ "Sat" ]
          start_time = "03:00"
          length_minutes = 60
    - path: /etc/systemd/zram-generator.conf
      mode: 0644
      overwrite: true
      contents:
        inline: |
          # This config file enables a /dev/zram0 device with the default settings
          [zram0]
    - path: /var/usrlocal/etc/storage/storage-btrfs.conf
      overwrite: true
      mode: 0744
      contents:
        local: config/coreos-files/storage-btrfs.conf
  directories:
    - path: /var/usrlocal/sysconfig
      mode: 0750
      user:
        name: root
      group:
        name: root
    - path: /var/usrlocal/lib/k3s/agent/cctv
      mode: 0750
      user:
        name: root
      group:
        name: root
    - path: /var/usrlocal/lib/k3s/agent/appdata
      mode: 0750
      user:
        name: root
      group:
        name: root
    - path: /var/usrlocal/lib/k3s/agent/nvme
      mode: 0750
      user:
        name: root
      group:
        name: root
    - path: /var/usrlocal/etc/k3s/skip
      mode: 0755
      user:
        name: root
      group:
        name: root
