apiVersion: v1
kind: Namespace
metadata:
  name: pihole
---
apiVersion: v1
data:
  admin: VldQUXRUUEM4ZyN0ekghRndocjJzRThzQWd5bm8hQUxFKnJneTgjQCMyVgo=
kind: Secret
metadata:
  name: webpassword
  namespace: pihole
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: pihole
  name: pihole-dns
  namespace: pihole
spec:
  ports:
  - name: 53-53-udp
    port: 53
    protocol: UDP
    targetPort: dns-udp
  - name: 53-53-tcp
    port: 53
    protocol: TCP
    targetPort: dns-tcp
  selector:
    app: pihole
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
  labels:
    app: pihole
  name: pihole-web
  namespace: pihole
spec:
  ports:
  - name: pihole-web
    port: 8080
    protocol: TCP
    targetPort: http-admin-web
  selector:
    app: pihole
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pihole-conf
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 3Gi
  local:
    fsType: btrfs
    path: /pvs/pihole/etc
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: app
          operator: In
          values:
          - compute
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-path
  volumeMode: Filesystem
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    volumeType: local
  name: pihole-conf-pvc
  namespace: pihole
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  storageClassName: local-path
  volumeMode: Filesystem
  volumeName: pihole-conf
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: pihole
  name: pihole
  namespace: pihole
spec:
  replicas: 3
  selector:
    matchLabels:
      app: pihole
  template:
    metadata:
      labels:
        app: pihole
        certificatesresolvers.letsencrypt.acme.httpchallenge: "true"
        certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint: web
        certificatesresolvers.letsencrypt.acme.storage: acme.json
        entrypoints.web.address: pihole.rick.expresso.lan
        entrypoints.web.http.redirections.entrypoint.to: websecure
        entrypoints.websecure.address: pihole.rick.expresso.lan
        providers.docker.network: k3d
        traefik.http.routers.pihole.entrypoints: websecure
        traefik.http.routers.pihole.tls: "true"
        traefik.http.routers.pihole.tls.certresolver: letsencrypt
        traefik.http.services.pihole.loadbalancer.server.port: "80"
      name: pihole
      namespace: pihole
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: app
                operator: In
                values:
                - compute
      automountServiceAccountToken: false
      containers:
      - env:
        - name: VIRTUAL_HOST
          value: pihole.rick.expresso.lan
        - name: ServerIP
          value: 10.50.0.2
        - name: TZ
          value: America/New_York
        - name: DNSMASQ_LISTENING
          value: all
        - name: FTLCONF_LOCAL_IPV4
          value: 10.50.0.2
        - name: PIHOLE_DNS_
          value: 8.8.8.8;4.4.4.4
        - name: DHCP_ACTIVE
          value: "false"
        - name: TEMPERATUREUNIT
          value: f
        - name: WEBTHEME
          value: default-darker
        - name: WEB_PORT
          value: "8080"
        - name: WEBPASSWORD
          valueFrom:
            secretKeyRef:
              key: admin
              name: webpassword
              optional: false
        image: docker.io/pihole/pihole:latest
        imagePullPolicy: IfNotPresent
        name: pihole
        ports:
        - containerPort: 53
          name: dns-udp
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 8080
          name: http-admin-web
          protocol: TCP
        resources:
          limits:
            cpu: 5000m
            memory: 150Mi
          requests:
            cpu: 500m
            memory: 100Mi
        securityContext:
          capabilities:
            drop:
            - CAP_MKNOD
            - CAP_NET_RAW
            - CAP_AUDIT_WRITE
        volumeMounts:
        - mountPath: /etc/pihole
          name: conf
      dnsConfig:
        nameservers:
        - 127.0.0.1
        - 1.1.1.1
      dnsPolicy: None
      enableServiceLinks: false
      hostname: pihole
      restartPolicy: Always
      volumes:
      - name: conf
        persistentVolumeClaim:
          claimName: pihole-conf-pvc
      - configMap:
          name: local-records
          optional: false
        name: local-records
      - name: webpassword
        secret:
          defaultMode: 256
          optional: false
          secretName: webpassword
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    traefik.frontend.rule.type: PathPrefix
  labels:
    app: pihole
  name: pihole-admin
  namespace: pihole
spec:
  rules:
  - host: pihole.rick.expresso.lan
    http:
      paths:
      - backend:
          service:
            name: pihole-web
            port:
              name: pihole-web
        path: /admin
        pathType: Prefix
