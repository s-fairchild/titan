---
apiVersion: k3d.io/v1alpha5
kind: Simple
metadata:
  name: titan
image: docker.io/rancher/k3s:v1.25.6-k3s1
servers: 1
agents: 3
network: k3d
kubeAPI:
  host: "titan" # important for the `server` setting in the kubeconfig
  hostIP: "127.0.0.1" # where the Kubernetes API will be listening on
  hostPort: "6443" # where the Kubernetes API listening port will be mapped to on your host system
volumes:
    - volume: /data/jellyfin:/data/jellyfin
      nodeFilters:
        - agent:*
  # - volume: /var/data/motionplus:/var/data/motionplus
    # nodeFilters:
      # - agent:*
  # - volume: /usr/local/etc/k3d/manifests:/var/lib/rancher/k3s/server/manifests # auto deploy manifests
    # nodeFilters:
      # - server:*
  # - volume: /usr/local/etc/pihole/custom.list:/usr/local/etc/pihole/custom.list
ports:
  - port: 8080:80 # same as `--port '8080:80@loadbalancer'`
    nodeFilters:
      - loadbalancer
  # - port: 30000-32767:30000-32767 # TODO currently the syntax above fails for v1alpha5, port syntax to new APIversion
  - port: 8096:30096
    nodeFilters:
      - agent:*
options:
  k3d: # k3d runtime settings
    wait: true # wait for cluster to be usable before returining; same as `--wait` (default: true)
    timeout: "300s" # wait timeout before aborting; same as `--timeout 60s`
  kubeconfig:
    updateDefaultKubeconfig: true # add new cluster to your default Kubeconfig; same as `--kubeconfig-update-default` (default: true)
    switchCurrentContext: true # also set current-context to the new cluster's context; same as `--kubeconfig-switch-context` (default: true)
  k3s:
    nodeLabels:
      - label: app=compute
        nodeFilters:
          - agent:*
