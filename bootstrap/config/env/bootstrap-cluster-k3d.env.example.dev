# Configure K3D management cluster
# unset these variables to use the default values, by commenting them out

# Override host docker socket
# See for more information https://k3d.io/v5.6.0/usage/advanced/podman/?h=podman#using-podman
export DOCKER_HOST=ssh://root@rick
export DOCKER_SOCK=/run/podman/podman.sock
# Use for user socket
# export DOCKER_SOCK=/run/user/1000/podman/podman.sock

# Podman subnets
export CLUSTER_SUBNET_NODES="10.94.0.0/16"
export CLUSTER_SUBNET_VMS="10.93.0.0/16"
export CLUSTER_SUBNET_SERVICES="10.46.0.0/16"
export CLUSTER_NETWORK_NAME_PREFIX="k3d"
# Must be set to the bridge devices default route IP address
# Client IP from dhcp server shown
export CLUSTER_APISERVER_ADDVERTISE_IP="10.50.0.202"

# export REPO_DIR="$(pwd)"
export ROLLBACK=false

export CLUSTER_MANAGER="bootstrapper"
export CLUSTER_DOMAIN="cluster.local"

# TODO store this as a podman secret, mount to k3d cluster members via podman secret
# Taken from https://github.com/alexellis/k3sup#create-a-multi-master-ha-setup-with-external-sql
token="$(openssl rand -base64 64)"
export TOKEN="${token}"

# Named volumes containing manifests for mounting unto server nodes
# Gets deleted and recreated
export MANIFESTS="k3d-${CLUSTER_MANAGER}-manifests"
export MANIFESTS_SKIP="k3d-${CLUSTER_MANAGER}-skip-manifests"

export MANAGEMENT_MIRROR_URL="https://registry-1.docker.io"
export MANAGEMENT_REGISTRY_USER=""
export MANAGEMENT_REGISTRY_PASS=""

# Must be prefixed with k3d- or k3d will fail to find the registry
# k3d registry create prefixes k3d- for us
export REGISTRY="${CLUSTER_MANAGER}-registry.localhost"
export REGISTRY_IMAGE_STORE="k3d-registry-images"
host_name="$(hostname -s)"
export INSTANCE="$host_name"

